<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>怀揣梦想,永不止步!</description>
    <link>http://www.veryjava.cn/</link>
    <atom:link href="http://www.veryjava.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 14 Oct 2016 11:09:25 +0800</pubDate>
    <lastBuildDate>Fri, 14 Oct 2016 11:09:25 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Spring Boot 起手式</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;起手&lt;/h2&gt;
</description>
        <pubDate>Thu, 13 Oct 2016 01:08:00 +0800</pubDate>
        <link>http://www.veryjava.cn/2016/10/13/Spring-Boot%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80-%E8%B5%B7%E6%89%8B%E5%BC%8F/</link>
        <guid isPermaLink="true">http://www.veryjava.cn/2016/10/13/Spring-Boot%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80-%E8%B5%B7%E6%89%8B%E5%BC%8F/</guid>
        
        <category>Spring Boot</category>
        
        
        <category>Spring-Boot</category>
        
      </item>
    
      <item>
        <title>在Spring Boot中使用Redis</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#redis&quot; id=&quot;markdown-toc-redis&quot;&gt;Redis简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linuxredis&quot; id=&quot;markdown-toc-linuxredis&quot;&gt;Linux下Redis安装(单机)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#redis-1&quot; id=&quot;markdown-toc-redis-1&quot;&gt;编译并安装Redis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-boot-redis&quot; id=&quot;markdown-toc-spring-boot-redis&quot;&gt;Spring Boot 连接Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;redis&quot;&gt;Redis简介&lt;/h1&gt;

&lt;p&gt;Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.redis.cn/&quot;&gt;Redis中国用户组&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;linuxredis&quot;&gt;Linux下Redis安装(单机)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;下载&lt;a href=&quot;http://www.redis.cn/download.html&quot;&gt;Redis3.2.3版本&lt;/a&gt;并解压&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
wget http://download.redis.io/releases/redis-3.2.3.tar.gz
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
tar -zxf redis-3.2.3.tar.gz ./
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;redis-1&quot;&gt;编译并安装Redis&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;编译Redis&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
cd xx/redis-3.2.3
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
make
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动Redis&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Redis配置文件redis.conf在根目录下,其中有很多默认配置和详细说明.在此就不全贴出来了.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#修改redis是否已守护进程的方式运行 yes则启动守护进程
daemonize no

#redis以守护进程运行时 制定其pidfile文件
pidfile /var/run/redis.pid

#Redis端口号,默认6379
port 6379

#客户端闲置超时时间,0则表示关闭该功能
timeout 300

#日志记录级别，Redis共支持四个级别：debug、verbose、notice、warning，默认为verbose
loglevel verbose

#日志输出方式,默认为标准输出,即输出到控制台;如果redis以守护进程的方式运行,在这个地方配置标准输出的话,则会将日志发送给/dev/null,即什么都看不到
logfile stdout

#数据库的数量,默认为0,可以使用SELECT &amp;lt;dbid&amp;gt;命令在redis-cli客户端切换数据库
databases 0

#指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合(redis是有机制将内存数据保存到硬盘的)
#Redis默认配置文件中提供了三个条件：
#save 900 1
#save 300 10
#save 60 10000
#分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt;

#制定Redis存储本地数据库时是否压缩数据,默认yes.不启用的话会导致数据库文件很大
rdbcompression yes

#本地数据库文件名,默认dump.rdb
dbfilename dump.rdb

#本地数据库存放目录
dir ./

#设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步(在master-slave模式时启用)
slaveof &amp;lt;masterip&amp;gt; &amp;lt;masterport&amp;gt;

#master服务密码
masterauth &amp;lt;master-password&amp;gt;

#设置redis链接密码.客户端链接Reids时需要通过AUTH &amp;lt;password&amp;gt;指定,默认关闭
requirepass foobared

#设置同一时间内最大客户端连接数,默认没有限制.是否跟ulimit命令有关系
maxclients 128

#为Redis指定最大内存限制.达到最大内存后,开始清理已到期或即将到期的key.注意linux的swap分区.
maxmemory &amp;lt;bytes&amp;gt;

#是否在每次更新操作后进行日志记录,Redis在默认情况下是异步的把数据写入磁盘,如果不开启,可能会在断电时导致一段时间内的数据丢失.因为 redis本身同步数据文件是按上面save条件来同步的,所以有的数据会在一段时间内只存在于内存中.默认为no
appendonly no

#更新日志文件名，默认为appendonly.aof
appendfilename appendonly.aof

#日志更新条件
#no:等操作系统进行数据缓存同步到磁盘(快)
#always:每次更新操作后手动调用fsync()将数据写到磁盘(慢,安全)
#everysec:表示每秒同步一次(折中,默认值)
appendfsync everysec

#是否启用虚拟内存机制,默认值为no
vm-enabled no

#虚拟内存文件路径,默认值为/tmp/redis.swap,不可多个Redis实例共享
vm-swap-file /tmp/redis.swap

#将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
vm-max-memory 0

#Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
vm-page-size 32

#设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。
vm-pages 134217728

#设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
vm-max-threads 4

#设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
glueoutputbuf yes

#指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
hash-max-zipmap-entries 64
hash-max-zipmap-value 512

#指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）
activerehashing yes

#指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
include /path/to/local.conf
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;关于vm开头的配置的说明&lt;/p&gt;

        &lt;p&gt;redis从2.4版本之后取消了以vm开头的配置.&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;The use of Virtual Memory is strongly discouraged.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;启动Redis服务端&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
cd xx/redis-3.2.3/src
&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
./redis-server
&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;启动Redis客户端&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
cd xx/redis-3.2.3/src
&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
./redis-cli
&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring-boot-redis&quot;&gt;Spring Boot 连接Redis&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;pom.xml&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;sunshineasbefore&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;redis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;redis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;redis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.17&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;application.properties&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.cache.type=redis
spring.cache.cache-names=redis-test
# REDIS (RedisProperties)
# Database index used by the connection factory.
spring.redis.database=0
# server host
spring.redis.host=localhost
# server password
spring.redis.password=
# connection port
spring.redis.port=6379
# pool settings ...
spring.redis.pool.max-idle=8
spring.redis.pool.min-idle=0
spring.redis.pool.max-active=8
spring.redis.pool.max-wait=-1
spring.redis.timeout=10
# name of Redis server
#spring.redis.sentinel.master=
# comma-separated list of host:port pairs
#spring.redis.sentinel.nodes=
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;redis config&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package redis;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import redis.clients.jedis.JedisPoolConfig;

/**
 * 描述: TODO:
 * 包名: redis.
 * 作者: barton.
 * 日期: 16-9-24.
 * 项目名称: redis
 * 版本: 1.0
 * JDK: since 1.8
 */
@Configuration
@EnableCaching
public class RedisConfig extends CachingConfigurerSupport {

  @Value(&quot;${spring.redis.host}&quot;)
  private String host;
  @Value(&quot;${spring.redis.port}&quot;)
  private int port;
  @Value(&quot;${spring.redis.timeout}&quot;)
  private int timeout;

  /**
   * 对于key的生成,不能使用随机生成.
   * 第一次访问时会生成一个key值,如果redis中不存在,则将此key值和对应的value值放置在redis中,
   * 第二次访问时会再次根据一定条件生成key值,如果此key值在redis中存在,则直接取.
   * 也就是说对于一个特定的对象,它生成的key值一定是要唯一的.
   */
  @Bean
  public KeyGenerator keyGenerator() {
    return (target, method, params) -&amp;gt; {
      StringBuilder sb = new StringBuilder();
      sb.append(target.getClass().getName());
      sb.append(method.getName());
      for (Object obj : params) {
        sb.append(obj.toString());
      }
      return sb.toString();
    };
  }

  @Bean
  public CacheManager cacheManager(RedisTemplate redisTemplate) {
    RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);
    // Number of seconds before expiration. Defaults to unlimited (0)
    cacheManager.setDefaultExpiration(10); //设置key-value超时时间
    return cacheManager;
  }

  @Bean
  public JedisConnectionFactory redisConnectionFactory() {
    JedisConnectionFactory factory = new JedisConnectionFactory();
    factory.setHostName(host);
    factory.setPort(port);
    factory.setTimeout(timeout); //设置连接超时时间
    factory.setUsePool(true);
    factory.setPoolConfig(jedisPoolConfig());
    return factory;
  }

  @Bean
  public RedisTemplate&amp;lt;String, String&amp;gt; redisTemplate(RedisConnectionFactory factory) {
    StringRedisTemplate template = new StringRedisTemplate(factory);
    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
    ObjectMapper om = new ObjectMapper();
    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
    jackson2JsonRedisSerializer.setObjectMapper(om);
    template.setValueSerializer(jackson2JsonRedisSerializer);
    template.afterPropertiesSet();
    return template;
  }

  @Bean
  public JedisPoolConfig jedisPoolConfig() {
    JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();
    //    jedisPoolConfig.set ...
    return jedisPoolConfig;
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;POJO对象&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Student {
  public Student() {
  }

  public Student(String id, String name, int age) {
    this.id = id;
    this.name = name;
    this.age = age;
  }

  private String id;
  private String name;
  private int age;

  // 省略getter setter...
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建一个RedisService来获取数据&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package redis;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

/**
 * 描述: TODO:
 * 包名: redis.
 * 作者: barton.
 * 日期: 16-9-24.
 * 项目名称: redis
 * 版本: 1.0
 * JDK: since 1.8
 */
@Service
public class RedisService {

  @Autowired
  private RedisTemplate&amp;lt;String, String&amp;gt; redisTemplate;

  // keyGenerator = &quot;keyGenerator&quot;注意结合Spring IOC/DI的概念.
  @Cacheable(value = &quot;studentcache&quot;, keyGenerator = &quot;keyGenerator&quot;)
  public Student getStudent(String id, String name, int age) {
    System.out.println(&quot;如果没有缓存,则会输出这一行内容!&quot;);
    return new Student(id, name, age);
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用JUnit Test测试getStudent方法&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

/**
 * 描述: TODO:
 * 包名: redis.
 * 作者: barton.
 * 日期: 16-9-24.
 * 项目名称: redis
 * 版本: 1.0
 * JDK: since 1.8
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = {RedisApplication.class})
public class RedisServiceTest {

  @Autowired
  private RedisService service;

  @Test
  public void testGetStudent() {
    System.out.println(&quot;第一次:&quot;);
    System.out.println(service.getStudent(&quot;1&quot;, &quot;barton&quot;, 22));
    System.out.println(&quot;第二次:&quot;);
    System.out.println(service.getStudent(&quot;1&quot;, &quot;barton&quot;, 22));
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输出结果&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;在首次运行时会输出:&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
第一次:
如果没有缓存,则会输出这一行内容!
redis.Student@6c5747db
第二次:
redis.Student@ba4f370
&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;再次运行时会输出:&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
第一次:
redis.Student@1ffd0114
第二次:
redis.Student@b3857e2
&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;解释:
再次运行时,redis中已经存在该对象的key了.所以两次都是从缓存中取得value值.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;如果将redis停止后,再启动,其运行结果同再次运行时输出的结果.原因,redis会根据配置文件的相关配置将value值进行持久化,而不仅仅是存放在内存中,断电后就没有了.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 01:08:00 +0800</pubDate>
        <link>http://www.veryjava.cn/2016/10/12/%E5%9C%A8Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Redis/</link>
        <guid isPermaLink="true">http://www.veryjava.cn/2016/10/12/%E5%9C%A8Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Redis/</guid>
        
        <category>Spring Boot</category>
        
        
        <category>Spring-Boot</category>
        
      </item>
    
      <item>
        <title>修改无法启动的docker容器的配置</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;解决思路&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;解决步骤&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;问题描述&lt;/h1&gt;

&lt;p&gt;mysql在运行过程中报错,进入mysql容器修改配置文件时,单词拼错,导致mysql容器无法重新启动.&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;解决思路&lt;/h1&gt;

&lt;p&gt;由于docker无法进入已经停止的容器,所以只能曲线救国.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;先提交无法进入的docker容器&lt;/li&gt;
  &lt;li&gt;使用临时终端启动新的镜像并修改相应文件,再次提交改容器&lt;/li&gt;
  &lt;li&gt;将无法启动的docker容器中的内容复制出来&lt;/li&gt;
  &lt;li&gt;使用新的镜像启动容器并挂载文件内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-2&quot;&gt;解决步骤&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;提交已经死亡的mysql容器&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  docker commit mysql-old sunshineasbefore/mysql
 &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动临时终端并修改出错的配置文件&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  docker run -it --name mysql-modify sunshineasbefore/mysql /bin/bash
 &lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  vim /etc/mysql/my.cnf
 &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;复制原有mysql数据库&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  cp -r /data/docker/volumes/925bca0a69b6bffc06933db5578dcadda2efa3d7cee7c5642d7734e001293353
  /_data /xxx/xxx
 &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提交修改后的mysql容器&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  docker commit mysql-modify sunshineasbefore/mysql
 &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新启动新的mysql容器并挂载原有mysql数据库&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  docker run -d -p 3306:3306 --name mysql-new -v
  /xxx/xxx/_data/:/var/lib/mysql sunshineasbefore/mysql mysqld
 &lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;这个地方需要注意:&lt;/strong&gt;
  因为在第二个步骤启动临时终端时使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;命令覆盖了mysql镜像中的&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqld&lt;/code&gt;命令,如果这一步不使用&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqld&lt;/code&gt; 命令覆盖回来的话,则不会启动成功.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-3&quot;&gt;总结&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;话说在使用docker的过程中,直接进入容器修改配置文件,出错了好像真没有什么办法能够回复.只能在使用过程中注意了…&lt;/li&gt;
  &lt;li&gt;话说在使用docker的过程中,还是要把配置文件挂载出来的好…&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 01:08:00 +0800</pubDate>
        <link>http://www.veryjava.cn/2016/10/11/%E4%BF%AE%E6%94%B9%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84docker%E5%AE%B9%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
        <guid isPermaLink="true">http://www.veryjava.cn/2016/10/11/%E4%BF%AE%E6%94%B9%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84docker%E5%AE%B9%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
        
        <category>docker</category>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>使用 GitHub Markdown Jekyll 开发个人博客</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#github&quot; id=&quot;markdown-toc-github&quot;&gt;GitHub简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#markdown&quot; id=&quot;markdown-toc-markdown&quot;&gt;Markdown简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll&quot; id=&quot;markdown-toc-jekyll&quot;&gt;Jekyll简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;好处&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;搭建本地开发环境&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll-themesclone&quot; id=&quot;markdown-toc-jekyll-themesclone&quot;&gt;选择Jekyll themes并clone到本地&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pushbloggithub&quot; id=&quot;markdown-toc-pushbloggithub&quot;&gt;push本地blog文件夹到github仓库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#blogpages&quot; id=&quot;markdown-toc-blogpages&quot;&gt;在blog仓库中设置开启pages功能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;博客配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;书写博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;个性域名设置.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;github&quot;&gt;GitHub简介&lt;/h1&gt;

&lt;p&gt;Git是一个分布式的版本控制系统，最初由Linus Torvalds编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取得了很大成功，尤其是在Ruby社区中。目前，包括Rubinius、Merb和Bitcoin在内的很多知名项目都使用了Git。Git同样可以被诸如Capistrano和Vlad the Deployer这样的部署工具所使用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://baike.baidu
.com/link?url=sjR5Bsqi5H4FkplgzTJWtdreJ86zA1pyx4Mp_0JdbrvBrMn6u_9618irNxNpzq-Tnp4LE4l31QdvijxdKZZu7a&quot;&gt;百度百科:GitHub简介&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/tech/github.html&quot;&gt;如何高效利用GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot;&gt;git - 简明指南&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;markdown&quot;&gt;Markdown简介&lt;/h1&gt;

&lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。
Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=_2GpTyKb0kBrVlGDOcGvmBjTDSPhazbeHDGeBghfVYbndvW94rERblhCJfazQZ9-VCL7iINFDbpMZWbL1Y956a&quot;&gt;百度百科:Markdown简介&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/1e402922ee32/&quot;&gt;Markdown——入门指南&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.appinn.com/markdown/&quot;&gt;Markdown 语法说明 (简体中文版)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;jekyll&quot;&gt;Jekyll简介&lt;/h1&gt;

&lt;p&gt;jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=frJ6Wu9gTPEIDJ8V-YvX94eUfcHRc_H2mNAPzr2CHviW1dBRpN-EivNxFdRCA6vzyhFm5y50miqiQPDnCCAFFK&quot;&gt;百度百科:Jekyll简介&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;Jekyll中文文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section&quot;&gt;好处&lt;/h1&gt;

&lt;p&gt;我们可以像提交代码一样来管理我们的博客,简单方便快捷,而且还免费. 在此感谢&lt;a href=&quot;www.github.com&quot;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;搭建本地开发环境&lt;/h1&gt;

&lt;p&gt;本文开发环境基于Ubuntu Kylin 16.04 LTS&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安装Ruby&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  sudo apt-get install ruby
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装gem&lt;/p&gt;

    &lt;p&gt;这个按照官网的教程安装上就可以了&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;https://rubygems.org/pages/download&quot;&gt;gem官网&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用gem安装jekyll&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
 sudo gem install jekyll
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;jekyll-themesclone&quot;&gt;选择Jekyll themes并clone到本地&lt;/h1&gt;

&lt;p&gt;我选择的是 &amp;gt; &lt;a href=&quot;https://github.com/liungkejin/liungkejin.github.io&quot;&gt;Jekyll theme链接:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;点击github 的 fork功能 将代码fork到自己的仓库&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git clone 刚刚fork的仓库到本地&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  cd /home/barton/develop/code/git/
  git clone https://github.com/sunshineasbefore/liungkejin.github.io.git
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建自己的博客文件夹&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  mkdir blog
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;复制&lt;code class=&quot;highlighter-rouge&quot;&gt;liungkejin.github.io&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;blog&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  cp -R liungkejin.github.io/* ./blog
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本地调试&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  cd /home/barton/develop/code/git/blog
  jekyll serve #不是jekyll server
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;等待运行完成后,在控制台也会打印出URL,复制此URL用浏览器打开即可访问,比如输入localhost:4000.
&lt;strong&gt;注意此处可能也会输入localhost:4000/blog 这个要根据_config.yml文件中是否配置baseurl来决定&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;pushbloggithub&quot;&gt;push本地blog文件夹到github仓库&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;首先需要在github上创建blog仓库&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/barton/develop/code/git/blog&lt;/code&gt;文件夹下执行一下命令:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
  git init #初始化git 本地仓库
  git remote set-url origin https://github.com/sunshineasbefore/blog.git #更改本地仓库的远程仓库地址
  git add ./* #添加文件到git版本管理中
  git commit -m &quot;init&quot; #将变更提交到本地仓库
  git branch gh-pages #创建新的gh-pages分支(如果要在github中使用pages功能需要这么一个分支)
  git push -u origin gh-pages #推送本地gh-pages分支到远程仓库,此步骤需要输入github用户名(邮箱)和密码
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;blogpages&quot;&gt;在blog仓库中设置开启pages功能&lt;/h1&gt;

&lt;p&gt;网上介绍这个功能的文章有很多,咱就不再重复一便了…
  进行到此步骤,在设置中就可以看到github分配给你的域名,比如说:sunshineasbefore.github.io/blog
  点击此域名即可访问使用github pages功能搭建的静态博客.&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;博客配置&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Jekyll的语法以及目录结构请参考Jekyll的中文文档.(文章开头有)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更改_config.yml&lt;/p&gt;

    &lt;p&gt;更改后内容如下:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site settings
title: 阳光如初.
description: http://veryjava.cn/
favicon: /assets/img/avatar.JPG
baseurl: #此处写 `/` + `仓库名称`,如果使用个人名,则不用写
url: http://veryjava.cn/ # 如果没有个人域名(稍后介绍),此处写 github分配给你的域名,比如说:sunshineasbefore.github.io/blog
rss_url:
# Build settings
highlighter: pygments # 语法高亮

timezone: Asia/Shanghai

markdown: kramdown # 此处使用kramdown编辑器
kramdown:
  input: GFM # 扩展语法.这个很重要,如果不写,则语法高亮不起作用
  auto_ids: true
  auto_id_prefix: &#39;id-&#39;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更改作者设置和博客设置
这两个文件主要是个人简介功能和博客头部个人签名设置
这两个文件在_data目录下.
更改后author.yml和blog.yml内容如下:&lt;/p&gt;

    &lt;p&gt;author.yml:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Author settings
name: 王
title: Java 开发工程师
address: 山东, 济南
email: work_wjj@163.com
github: sunshineasbefore
gavatar: /assets/img/avatar.JPG
workHistory:
- work3:
  company: 济南三际电子商务有限公司
  location: 山东, 济南
  title: Java 高级开发工程师
  started: 2015
  duration: (2015.8 - 至今)
  description: Linux服务器维护,项目开发,参与系统架构设计

- work2:
  company: 上海某科技公司
  location: 中国，上海
  title: Java 开发工程师
  started: 2014
  duration: (2014.4 - 2015.8)
  description: 在平安好车做新车购,C2C项目

- work1:
  company: 济南某对日外包企业
  location: 山东, 济南
  title: Java 程序员
  started: 2013
  duration: (2012.6 - 2014.4)
  description: 对日项目外包

educationHistory:
- education1:
  organization: 烟台某大学
  degree: 学士
  major: 软件技术
  started: 2008
  duration: (2008.9 - 2012.7)
  description: C/C++, Java, C#, 等
languages:
- language1:
  name: 中文
  proficiency: 母语
- language2:
  name: 英语
  proficiency: 有限
programmingSkills:
- Java:
  name: Java
  percentage: 90%
- Bash:
  name: Bash Shell
  percentage: 60%
- JS:
  name: JavaScript
  percentage: 70%
- Docker:
  name: Docker
  percentage: 50%
- git:
  name: Git
  percentage: 70%
- MySQL:
  name: MySQL
  percentage: 70%
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;blog.yml:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;title: 阳光如初.
description: 怀揣梦想,永不止步!
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-3&quot;&gt;书写博客&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;格式
在_posts文件夹下新建文档,格式如下:&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-mm-dd-文件名称.md&lt;/code&gt; (文件名称可以带空格)
jekyll以日期+名称的格式命名文章,否则将不识别.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文档头部&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title:  &quot;Welcome to Jekyll!&quot;
date:   2014-01-27 21:57:11
categories: jekyll update
---
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;其中:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;title：文章的标题&lt;/li&gt;
      &lt;li&gt;date：文章的日期&lt;/li&gt;
      &lt;li&gt;categories：定义了文章所属的目录，一个list，将会根据这个目录的list来创建目录并将文章html放在生成的目录下，文章分类时候用，这里就不使用了&lt;/li&gt;
      &lt;li&gt;layout：文章所使用的模板名称，也就是_layouts中定义的模板的文件名去掉.html&lt;/li&gt;
      &lt;li&gt;tags：例子中没有，定义了文章的标签，也是一个list，文章分类时候用，这里就不使用了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kramdown
kramdown遵循大多数markdown的语法,但是有一些细节的地方不太一致.比如说代码块和之前的文字描述之间必须有空行;Tab键和空格的表现形式差距很大等,&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;push文章到仓库&lt;/p&gt;

    &lt;p&gt;将写好的文章push到远程仓库的gh-pages分支后,点击github分配给你的域名便可访问了.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-4&quot;&gt;个性域名设置.&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;申请域名:
我是从&lt;a href=&quot;https://wanwang.aliyun.com/&quot;&gt;万网&lt;/a&gt; 申请的域名veryjava.cn. (已经归属于阿里云旗下)
具体申请步骤不再介绍.&lt;/li&gt;
  &lt;li&gt;两种方式绑定个性域名:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;使用CNAME文件.
在博客文件夹的根目录创建CNAME文件.&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
touch CNAME
&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;编辑CNAME文件放置自己的个性域名:&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
 vim CNAME
&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;编辑后的内容:&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
veryjava.cn
&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;是的,仅仅就只有一行,并且不要带www&lt;/p&gt;

        &lt;p&gt;然后将CNAME文件push到远程仓库就可以了.当然不要忘记设置&lt;a href=&quot;http://jingyan.baidu
.com/article/3c343ff70fb6e60d3779632f.html&quot;&gt;域名的DNS解析&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;直接在仓库的设置选项中设置
打开仓库设置选项 找到&lt;code class=&quot;highlighter-rouge&quot;&gt;Custom domain&lt;/code&gt;功能,添加自己的域名即可.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;需要注意的地方
DNS解析到国外需要24小时的时间,所以设置好后,不要在看到仓库设置中的黄色警告时着急.等等明天就好了.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 03 Sep 2016 01:08:00 +0800</pubDate>
        <link>http://www.veryjava.cn/2016/09/03/%E4%BD%BF%E7%94%A8-GitHub-Markdown-Jekyll-%E5%BC%80%E5%8F%91%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <guid isPermaLink="true">http://www.veryjava.cn/2016/09/03/%E4%BD%BF%E7%94%A8-GitHub-Markdown-Jekyll-%E5%BC%80%E5%8F%91%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        
        <category>jekyll</category>
        
        
        <category>其他</category>
        
      </item>
    
      <item>
        <title>Spring MVC 简介</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mvc&quot; id=&quot;markdown-toc-mvc&quot;&gt;MVC概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;三层架构概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-mvc-&quot; id=&quot;markdown-toc-spring-mvc-&quot;&gt;Spring MVC 介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-mvc&quot; id=&quot;markdown-toc-spring-mvc&quot;&gt;Spring MVC的优势&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-mvc-1&quot; id=&quot;markdown-toc-spring-mvc-1&quot;&gt;Spring MVC的常用注解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-mvc--1&quot; id=&quot;markdown-toc-spring-mvc--1&quot;&gt;Spring MVC 基本配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-mvc--2&quot; id=&quot;markdown-toc-spring-mvc--2&quot;&gt;Spring MVC 静态资源配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文主要介绍Spring MVC.&lt;/p&gt;

&lt;h1 id=&quot;mvc&quot;&gt;MVC概述&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;MVC 是 Model-View-Control 的简称，即模型-视图-控制器。它是一个存在于服务器表达层的模型，它将应用分开，改变应用之间的高度耦合。&lt;/li&gt;
  &lt;li&gt;视图
    &lt;ul&gt;
      &lt;li&gt;数据的展现。视图是用户看到并与之交互的界面。视图向用户显示相关的数据，并能接收用户的输入数据，但是它并不进行任何实际的业务处理。视图可以向模型查询业务状态，但不能改变模型。视图还能接受模型发出的数据更新事件，从而对用户界面进行同步更新。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;模型
    &lt;ul&gt;
      &lt;li&gt;应用对象。模型是应用程序的主体部分。 模型代表了业务数据和业务逻辑； 当数据发生改变时，它要负责通知视图部分；一个模型能为多个视图提供数据。由于同一个模型可以被多个视图重用，所以提高了应用的可重用性。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;控制器
    &lt;ul&gt;
      &lt;li&gt;逻辑处理、控制实体数据在视图上展示、调用模型处理业务请求。当 Web 用户单击 Web 页面中的提交按钮来发送 HTML 表单时，控制器接收请求并调用相应的模型组件去处理请求，然后调用相应的视图来显示模型返回的数据。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MVC 模型运行机制
在 MVC 模式中，Web 用户向服务器提交的所有请求都由控制器接管。接受到请求之后，控制器负责决定应该调用哪个模型来进行处理；然后模型根据用户请求进行相应的业务逻辑处理，并返回数据；最后控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.iteye.com/upload/attachment/576353/d3d769c0-5df9-3c31-9984-42f1fcbd00bb.jpg&quot; alt=&quot;MVC 模型运行机制&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;三层架构概述&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Presentation tier + Application tier + Data tier (展现层 + 应用层 + 数据访问层)&lt;/li&gt;
  &lt;li&gt;实际上MVC只存在三层架构的展现层,M实际商是数据模型,是包含数据的对象.&lt;/li&gt;
  &lt;li&gt;Service和Dao层反馈在应用层和数据访问层&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring-mvc-&quot;&gt;Spring MVC 介绍&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Web MVC处理请求的流程
具体执行步骤如下：
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;首先用户发送请求—–&amp;gt;前端控制器，前端控制器根据请求信息（如URL）来决定选择哪一个页面控制器进行处理并把请求委托给它，即以前的控制器的控制逻辑部分；图2-1中的1、2步骤；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;页面控制器接收到请求后，进行功能处理，首先需要收集和绑定请求参数到一个对象，这个对象在Spring Web MVC中叫命令对象，并进行验证，然后将命令对象委托给业务对象进行处理；处理完毕后返回一个ModelAndView（模型数据和逻辑视图名）；图2-1中的3、4、5步骤；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;前端控制器收回控制权，然后根据返回的逻辑视图名，选择相应的视图进行渲染，并把模型数据传入以便视图渲染；图2-1中的步骤6、7；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;前端控制器再次收回控制权，将响应返回给用户，图2-1中的步骤8；至此整个结束
&lt;img src=&quot;http://sishuok.com/forum/upload/2012/7/14/529024df9d2b0d1e62d8054a86d866c9__1.JPG&quot; alt=&quot;Spring Web MVC处理请求的流程&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring-mvc&quot;&gt;Spring MVC的优势&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;清晰的角色划分：前端控制器（DispatcherServlet）、请求到处理器映射（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）、处理器或页面控制器（Controller）、验证器（   Validator）、命令对象（Command  请求参数绑定到的对象就叫命令对象）、表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于命令对象就是一个POJO，无需继承框架特定API，可以使用命令对象直接作为业务对象；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;和Spring 其他框架无缝集成，是其它Web框架所不具备的；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可适配，通过HandlerAdapter可以支持任意的类作为处理器；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可定制性，HandlerMapping、ViewResolver等能够非常简单的定制；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;功能强大的数据验证、格式化、绑定机制；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利用Spring提供的Mock对象能够非常简单的进行Web层单元测试；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;强大的JSP标签库，使JSP编写更容易。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring-mvc-1&quot;&gt;Spring MVC的常用注解&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;@ Controller 表明这个类是Spring MVC里的Controller.Dispatcher Servlet 会自动扫描注解了此注解的类.在声明普通Bean的时候,使用@Component,@Service,@Repository和@Controller是等同的,因为@Service,@Repository,@Controller都组合了@Component元注解.但在Spring MVC声明控制器Bean的时候,只能使用@Controller.&lt;/li&gt;
  &lt;li&gt;@RequestMapping 用来映射Web请求(访问路径和参数),处理类和方法.其支持Servlet的request和response作为参数.&lt;/li&gt;
  &lt;li&gt;@ResponseBody 支持将返回值放在response体内,而不是返回一个页面,此注解可放置在返回值前或者方法上.&lt;/li&gt;
  &lt;li&gt;@RequestBody 允许request的参数在request体中,而不是直接链接在地址后面.此注解放置在参数前.&lt;/li&gt;
  &lt;li&gt;@PathVariable 用来接收路径参数,此注解放置在参数前.&lt;/li&gt;
  &lt;li&gt;@RestController 这是一个组合注解,组合了@Controller和@ResponseBody&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;延伸阅读:
&amp;gt; &lt;a href=&quot;http://blog.csdn.net/jcx5083761/article/details/9340209&quot;&gt;什么是request,response&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring-mvc--1&quot;&gt;Spring MVC 基本配置&lt;/h1&gt;
&lt;p&gt;Spring MVC的定制配置需要我们的配置类集成一个WebMvcConfigurerAdapter类,并在此类使用@EnableWebMvc注解,来开启Spring MVC的配置支持.&lt;/p&gt;

&lt;h1 id=&quot;spring-mvc--2&quot;&gt;Spring MVC 静态资源配置&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/isea533/article/details/50412212&quot;&gt;Spring Boot默认的静态资源配置&lt;/a&gt;
  如果需要直接访问静态资源,可以在我们的配置类中重写 addResourceHandlers方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;快捷的ViewController
无需做任何业务处理,只是简单的页面转向,可以使用addViewControllers方法来实现.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.wangge.buzmgt.config;
import com.wangge.json.JSONFormatMethodProcessor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.ResourceHttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;
import org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;
import org.springframework.http.converter.xml.SourceHttpMessageConverter;
import org.springframework.web.method.support.HandlerMethodReturnValueHandler;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import java.util.ArrayList;
import java.util.List;

@Configuration
@EnableWebMvc
public class WebMvcConfig extends WebMvcConfigurerAdapter {

  @Override
  public void addViewControllers (ViewControllerRegistry registry) {
    registry.addViewController (&quot;/&quot;).setViewName (&quot;index&quot;);
    registry.addViewController (&quot;/left&quot;).setViewName (&quot;left&quot;);
  }

  @Override
  public void addReturnValueHandlers (List&amp;lt;HandlerMethodReturnValueHandler&amp;gt; returnValueHandlers) {
    returnValueHandlers.add (new JSONFormatMethodProcessor (messageConverter ()));
  }

  private List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; messageConverter () {
    List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converters = new ArrayList&amp;lt;&amp;gt; ();
    converters.add (new ByteArrayHttpMessageConverter ());
    converters.add (new StringHttpMessageConverter ());
    converters.add (new ResourceHttpMessageConverter ());
    converters.add (new SourceHttpMessageConverter&amp;lt;&amp;gt; ());
    converters.add (new AllEncompassingFormHttpMessageConverter ());
    converters.add (new Jaxb2RootElementHttpMessageConverter ());
    converters.add (new MappingJackson2HttpMessageConverter ());
    return converters;
  }

  @Override
  public void addResourceHandlers (ResourceHandlerRegistry registry) {
    registry.addResourceHandler (&quot;/static/**&quot;).addResourceLocations (&quot;classpath:/static/&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;其中 addResourceLocations 指的是文件放置的目录,addResourceHandler指的是对外暴露的访问路径.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 01:08:00 +0800</pubDate>
        <link>http://www.veryjava.cn/2016/08/28/Spring-MVC-%E7%AE%80%E4%BB%8B/</link>
        <guid isPermaLink="true">http://www.veryjava.cn/2016/08/28/Spring-MVC-%E7%AE%80%E4%BB%8B/</guid>
        
        <category>Spring MVC</category>
        
        
        <category>Spring-MVC</category>
        
      </item>
    
      <item>
        <title>基于java getter/setter方法配置apache shiro</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文主要介绍使用javaconfig的模式配置Shiro web.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;说明&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;谷歌,百度上介绍apache shiro配置的文章并不少,但是缺少我想要的基于java getter/setter方法配置apache shiro的文章.今天整一个.&lt;/li&gt;
  &lt;li&gt;重点在于 ShiroConfig类中如何配置shiroFilter,securityManager,tokenRealm,sessionListener以及sessionManager.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;是spring的一个注解,用来标识该类是一个配置类,并且会注入到spring容器中.可以直接使用@Autowird注入.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;代码&lt;/h1&gt;
&lt;p&gt;SessionListener:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import org.apache.shiro.session.Session;
import org.springframework.stereotype.Component;
import ss.app.common.util.ContextUtil;

@Component
public class SessionListener implements org.apache.shiro.session.SessionListener {

  @Override
  public void onStart(Session session) {
  }

  @Override
  public void onStop(Session session) {
  }

  @Override
  public void onExpiration(Session session) {
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;UserRealm:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authc.*;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.springframework.beans.factory.annotation.Autowired;
import ss.app.user.entity.SystemUser;
import ss.app.user.service.SystemUserService;

public class UserRealm extends AuthorizingRealm {

  @Autowired
  private SystemUserService systemUserService;

  @Override
  protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
    return null;
  }

  @Override
  protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
    String name = (String) token.getPrincipal();
    String password = String.valueOf((char[]) token.getCredentials());

    if (StringUtils.isBlank(&quot;name&quot;) || StringUtils.isBlank(&quot;password&quot;)) {
      throw new UnknownAccountException(&quot;用户名或者密码为空&quot;);
    }

    SystemUser user = systemUserService.findByName(name);

    if (null == user) {
      throw new UnknownAccountException(&quot;用户不存在&quot;);
    }

    if (!StringUtils.equals(password, user.getPassword())) {
      throw new UnknownAccountException(&quot;密码不正确&quot;);
    }

    //如果身份认证验证成功，返回一个AuthenticationInfo实现
    return new SimpleAuthenticationInfo(name, password, getName());
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ShiroConfig:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import org.apache.shiro.realm.Realm;
import org.apache.shiro.session.SessionListener;
import org.apache.shiro.session.mgt.SessionManager;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.filter.authc.UserFilter;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.servlet.Filter;
import java.util.*;

@Configuration
public class ShiroConfig {

  @Bean(name = &quot;shiroFilter&quot;)
  public ShiroFilterFactoryBean shiroFilter() {
    ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();
    shiroFilter.setLoginUrl(&quot;/&quot;);
    shiroFilter.setSuccessUrl(&quot;/index&quot;);
    shiroFilter.setUnauthorizedUrl(&quot;/forbidden&quot;);

    Map&amp;lt;String, Filter&amp;gt; filters = new HashMap&amp;lt;&amp;gt;();
    filters.put(&quot;users&quot;, new UserFilter());
    shiroFilter.setFilters(filters);

    Map&amp;lt;String, String&amp;gt; filterChainMap = new HashMap&amp;lt;&amp;gt;();
    filterChainMap.put(&quot;/index/**&quot;, &quot;users&quot;);
    filterChainMap.put(&quot;/menu/**&quot;, &quot;users&quot;);
    filterChainMap.put(&quot;/gzhyy/**&quot;, &quot;users&quot;);
    filterChainMap.put(&quot;/gzhgl/**&quot;, &quot;users&quot;);
    filterChainMap.put(&quot;/assert/**&quot;, &quot;anon&quot;);
    filterChainMap.put(&quot;/css/**&quot;, &quot;anon&quot;);
    filterChainMap.put(&quot;/js/**&quot;, &quot;anon&quot;);
    shiroFilter.setFilterChainDefinitionMap(filterChainMap);
    shiroFilter.setSecurityManager(securityManager());

    return shiroFilter;
  }

  public org.apache.shiro.mgt.SecurityManager securityManager() {
    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
    securityManager.setSessionManager(sessionManager());
    Collection&amp;lt;Realm&amp;gt; realms = new ArrayList&amp;lt;&amp;gt;();
    realms.add(tokenRealm());
    securityManager.setRealms(realms);
    return securityManager;
  }

  @Bean
  public UserRealm tokenRealm() {
    return new UserRealm();
  }

  public List&amp;lt;SessionListener&amp;gt; sessionListener() {
    List&amp;lt;SessionListener&amp;gt; listeners = new ArrayList&amp;lt;&amp;gt;();
    listeners.add(new ss.app.common.config.session.SessionListener());
    return listeners;
  }

  public SessionManager sessionManager() {
    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();
    sessionManager.setSessionListeners(sessionListener());
    sessionManager.setGlobalSessionTimeout(30 * 60　* 1000); // 30分钟
    return sessionManager;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 01:08:00 +0800</pubDate>
        <link>http://www.veryjava.cn/2016/08/28/%E4%BD%BF%E7%94%A8-java-getter.setter%E6%96%B9%E6%B3%95%E9%85%8D%E7%BD%AEapache-shiro/</link>
        <guid isPermaLink="true">http://www.veryjava.cn/2016/08/28/%E4%BD%BF%E7%94%A8-java-getter.setter%E6%96%B9%E6%B3%95%E9%85%8D%E7%BD%AEapache-shiro/</guid>
        
        <category>shiro</category>
        
        
        <category>Apache-Shiro</category>
        
      </item>
    
      <item>
        <title>Spring Boot的Web开发</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-bootweb&quot; id=&quot;markdown-toc-spring-bootweb&quot;&gt;Spring Boot的Web开发支持&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thymeleaf&quot; id=&quot;markdown-toc-thymeleaf&quot;&gt;Thymeleaf模板引擎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-bootthymeleaf&quot; id=&quot;markdown-toc-spring-bootthymeleaf&quot;&gt;Spring Boot的Thymeleaf支持&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-boot&quot; id=&quot;markdown-toc-spring-boot&quot;&gt;Spring Boot自动配置的静态资源&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-boot-&quot; id=&quot;markdown-toc-spring-boot-&quot;&gt;Spring Boot 对静态首页的支持&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tomcatjetty&quot; id=&quot;markdown-toc-tomcatjetty&quot;&gt;将Tomcat替换为Jetty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tomcatundertow&quot; id=&quot;markdown-toc-tomcatundertow&quot;&gt;将Tomcat替换为Undertow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#favicon&quot; id=&quot;markdown-toc-favicon&quot;&gt;设置Favicon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文主要介绍Spring Boot 对Spring MVC的支持.&lt;/p&gt;

&lt;h1 id=&quot;spring-bootweb&quot;&gt;Spring Boot的Web开发支持&lt;/h1&gt;

&lt;p&gt;Spring Boot提供了spring-boot-starter-web为Web开发予以支持.它为我们提供了嵌入的Tomcat以及Spring MVC的依赖.&lt;/p&gt;

&lt;h1 id=&quot;thymeleaf&quot;&gt;Thymeleaf模板引擎&lt;/h1&gt;

&lt;p&gt;Spring Boot 推荐使用Thymeleaf作为模板引擎.因为其提供了完整的Spring MVC支持.
  因为使用嵌入的Servlet容器来运行JSP的话有一些小问题,内嵌Tomcat,Jetty不支持以jar的形式运行JSP,而且Undertow不支持JSP.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Thymeleaf基础知识
Thymeleaf是一个java类库,它是一个xml/xhtml/html5的模板引擎,可以作为MVC的Web应用的View层.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dreamfree/p/4158557.html?utm_source=tuicool&quot;&gt;Thymeleaf基础知识&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;补充:
在javascript中访问model&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script th:inline=&quot;javascript&quot;&amp;gt;
var single=[[${singlePerson}]];
console.log(single.name + &quot;/&quot; + single.age);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring-bootthymeleaf&quot;&gt;Spring Boot的Thymeleaf支持&lt;/h1&gt;
&lt;p&gt;Spring Boot通过自动配置功能对Thymeleaf进行了自动配置,因此可以直接使用.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:th=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.thymeleaf.org&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-UA-COMPATIBLE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Thymeleaf&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@{bootstrap/css/bootstrap.min.css}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@{bootstrap/css/bootstrap-theme.min.css}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;th:src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@{js/jquery-2.2.3.js}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@{bootstrap/js/bootstrap.min.js}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-heading&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 访问model&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${singlePerson.name}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${not #lists.isEmpty(people)}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-heading&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;列表&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list-group-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:each=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;person:${people}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${person.name}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${person.age}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#39;getName(\&#39;&#39;+${person.name}+&#39;\&#39;);&#39;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;获得名字
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;th:inline=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;singlePerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

package person.learn.thymeleaf;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.ArrayList;
import java.util.List;

/**
 * 1.使用Thymeleaf作为模板引擎,要在application.yml里设置spring.thymeleaf.caching设置为false
 * 2.用了模板引擎之后,原先对于jsp的设置无效
 * 3.(idea编辑器需要手动点击CTRL+F9,手动编译,因为IDEA文件不需要手动保存)修改Thymeleaf模板的内容后,要不重启项目就生效的话,需要make一下,
 * 或者使用热部署:http://mamicode.com/info-detail-1346413.html
 * 4.要使用Thymeleaf模板 请将pom.xml中相应的jar依赖注释去掉
 * Created by barton on 16-5-19.
 */
@Controller
public class ThymeleafController {

    @RequestMapping(&quot;/thymeleaf&quot;)
    public String index(Model model) {
        Person single = new Person(&quot;aa&quot;, 11);

        List&lt;span class=&quot;nt&quot;&gt;&amp;lt;Person&amp;gt;&lt;/span&gt; people = new ArrayList&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt;();

        Person p1 = new Person(&quot;xx&quot;, 11);
        Person p2 = new Person(&quot;yy&quot;, 22);
        Person p3 = new Person(&quot;zz&quot;, 33);

        people.add(p1);
        people.add(p2);
        people.add(p3);

        model.addAttribute(&quot;singlePerson&quot;, single);
        model.addAttribute(&quot;people&quot;, people);

        return &quot;thymeleaf/thymeleaf&quot;;
    }
}


package person.learn.thymeleaf;

/**
 * Created by barton on 16-5-19.
 */
public class Person {

    public Person(String name, Integer age) {
        this.name = name;
        this.age = age;
    }

    private String name;
    private Integer age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;spring-boot&quot;&gt;Spring Boot自动配置的静态资源&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;类路径文件
把类路径下的/static,/public,/resources和/META-INF/resources文件夹下的静态文件直接映射为/&lt;strong&gt;,可以通过http://localhost:8080/&lt;/strong&gt;来访问.&lt;/li&gt;
  &lt;li&gt;webjar
webjar就是将我们常用的脚本框架封装在jar包中的jar包.
把webjar的/META-INF/resources/webjars/下的静态文件映射为/webjar/&lt;strong&gt;,可以通过http://localhost:8080/webjar/&lt;/strong&gt; 来访问&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring-boot-&quot;&gt;Spring Boot 对静态首页的支持&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;classpath:/META-INF/resources/index.html&lt;/li&gt;
  &lt;li&gt;classpath:/resources/index.html&lt;/li&gt;
  &lt;li&gt;classpath:/static/index.html&lt;/li&gt;
  &lt;li&gt;classpath:/public/index.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tomcatjetty&quot;&gt;将Tomcat替换为Jetty&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
      &amp;lt;exclusions&amp;gt;
          &amp;lt;exclusion&amp;gt;
              &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
              &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
          &amp;lt;/exclusion&amp;gt;
      &amp;lt;/exclusions&amp;gt;
  &amp;lt;/dependency&amp;gt;

  &amp;lt;!-- 使用jetty替代tomcat,如果是使用jsp作为模板，则不能使用内嵌的jetty容器。 --&amp;gt;
  &amp;lt;!-- 内嵌的jetty容器不支持jsp模板 --&amp;gt;
  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-jetty&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;tomcatundertow&quot;&gt;将Tomcat替换为Undertow&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
     &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
     &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
     &amp;lt;exclusions&amp;gt;
         &amp;lt;exclusion&amp;gt;
             &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
             &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
         &amp;lt;/exclusion&amp;gt;
     &amp;lt;/exclusions&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
     &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
     &amp;lt;artifactId&amp;gt;spring-boot-starter-undertow&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;favicon&quot;&gt;设置Favicon&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;只需将自己的favicon.ico 防止在类路径根目录,类路径META-INF/resources/下,类路径resources/下,类路径static/下或者类路径public/下.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 01:08:00 +0800</pubDate>
        <link>http://www.veryjava.cn/2016/08/28/Spring-Boot%E7%9A%84Web%E5%BC%80%E5%8F%91/</link>
        <guid isPermaLink="true">http://www.veryjava.cn/2016/08/28/Spring-Boot%E7%9A%84Web%E5%BC%80%E5%8F%91/</guid>
        
        <category>Spring Boot</category>
        
        
        <category>Spring-Boot</category>
        
      </item>
    
      <item>
        <title>对JPA实体关系管理双向关联的一些思考</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;现象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;解决思路&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#fastjson&quot; id=&quot;markdown-toc-fastjson&quot;&gt;使用fastjson&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;重新设计实体关系&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文主要解决JPA中实体关联关系在进行json序列化的过程中,产生的循环问题.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;现象&lt;/h1&gt;

&lt;p&gt;在使用JPA进行实体关系管理的时候,会产生无限循环的情况,如果使用&lt;code class=&quot;highlighter-rouge&quot;&gt;fastjson&lt;/code&gt;来进行序列化,则表现形式如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1address name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;person&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;$ref&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;zipCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ZipCode01&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0lastName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2address name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;person&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;$ref&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;zipCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ZipCode11&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1lastName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;重点是&lt;code class=&quot;highlighter-rouge&quot;&gt;address.person&lt;/code&gt;的值:&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;$ref&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/em&gt;
如果你用的不是fastjson(它默认会检查该对象是否已经存在在json文本中)而是其他一些json类库,比如jackson,则会抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.StackOverflowError&lt;/code&gt;异常(无限循环产生的栈溢出所导致).
但是,哪怕你用的是fastjson,你也无法用js来解析&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;$ref&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;解决思路&lt;/h1&gt;

&lt;h4 id=&quot;fastjson&quot;&gt;使用fastjson&lt;/h4&gt;
&lt;p&gt;其自带的&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.toJSONString(page,SerializerFeature.DisableCircularReferenceDetect)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点:解决快速&lt;/li&gt;
  &lt;li&gt;缺点:
    &lt;ul&gt;
      &lt;li&gt;序列化后的json文本包含太多不需要的信息,冗杂程度太高&lt;/li&gt;
      &lt;li&gt;方式太死板,没有相应的注解来实现(jackson有一个),接口只能返回String类型了.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;重新设计实体关系&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;尽量避免双向关联&lt;/em&gt;,使用RESTful进行接口的暴露.(举个例子来说)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点:逻辑清晰,结构更合理&lt;/li&gt;
  &lt;li&gt;缺点:
    &lt;ul&gt;
      &lt;li&gt;对老代码改动较大.&lt;/li&gt;
      &lt;li&gt;实现较复杂,要对整体业务逻辑有清晰的认识.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实体类Person:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Person {
  private String name;

  @Id
  @GeneratedValue
  private Long id;

  @ManyToMany
  @JoinColumn(name = &quot;address_id&quot;)
  private List&amp;lt;Address&amp;gt; addresses;

  // ...... getter and setter
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实体类Address:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Address {
  @Id
  @GeneratedValue
  private Long id;

  private String name;

  private String zipCode;

  // ...... getter and setter
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;两个实体类之间的关系为Many Person To Many Address,只在Person实体类中进行关系的配置,避免双向关联.&lt;/p&gt;

&lt;p&gt;下面举例说明使用RESTful来对资源进行访问的情况.&lt;/p&gt;

&lt;p&gt;对于Person:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 查询所有Person: &lt;code class=&quot;highlighter-rouge&quot;&gt;/persons&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2 查询某一个Person: &lt;code class=&quot;highlighter-rouge&quot;&gt;/persons/{person_id}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;3 &lt;strong&gt;查询某一个Person的所有Address: &lt;code class=&quot;highlighter-rouge&quot;&gt;/persons/{person_id}/addresses&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;4 &lt;strong&gt;查询某一个Person的某一个Address: &lt;code class=&quot;highlighter-rouge&quot;&gt;/persons/{person_id}/addresses/{address_id}&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果要查询一个Address有几个Person:  &lt;code class=&quot;highlighter-rouge&quot;&gt;/persons?address.id=xxx&lt;/code&gt; (带分页,自己设置pageSize)&lt;/p&gt;

&lt;p&gt;对于Address:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 查询所有Address: &lt;code class=&quot;highlighter-rouge&quot;&gt;/addresses&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2 查询某一个Address: &lt;code class=&quot;highlighter-rouge&quot;&gt;/addresses/{address_id}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上是Person和Address的一些简单接口.其中&lt;strong&gt;粗体&lt;/strong&gt;部分为关联查询.
设计的思路就是要尽量避免双向关联,然后把Person作为一个资源,把Address作为Person的一个子资源或者属性.
上述Person中的1 2 将Address作为了属性,查询时可以通过参数传递进去.而上述Person中的3 4 两个接口则将Address作为一个子资源进行管理.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果要用Address来作为一个资源反查Person怎么办?&lt;/strong&gt;
在一个Address管理页面,需求要求列出某一个住址下的Person:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;点击某一项:
  Address发起&lt;code class=&quot;highlighter-rouge&quot;&gt;/persons?address.id=xxx&lt;/code&gt;请求,取得&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;默认显示:
  在controller层对&lt;code class=&quot;highlighter-rouge&quot;&gt;/persons?address.id_in=xxx1,xxx2,xxx3&lt;/code&gt;接口的返回值进行处理,取得&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Address&amp;gt;&lt;/code&gt;和其对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-3&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;尽量避免双向关联,使用更合理的API设计方式,合理区分子资源和属性.
大大减少数据库压力!&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 01:08:00 +0800</pubDate>
        <link>http://www.veryjava.cn/2016/08/28/%E5%AF%B9JPA%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E5%8F%8C%E5%90%91%E5%85%B3%E8%81%94%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
        <guid isPermaLink="true">http://www.veryjava.cn/2016/08/28/%E5%AF%B9JPA%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E5%8F%8C%E5%90%91%E5%85%B3%E8%81%94%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
        
        <category>JPA</category>
        
        
        <category>JPA</category>
        
      </item>
    
  </channel>
</rss>
